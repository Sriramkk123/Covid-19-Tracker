{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","_ref","title","cases","active","isRed","total","props","Object","objectWithoutProperties","react_default","a","createElement","Card","onClick","className","concat","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","toConsumableArray","sort","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","arguments","length","undefined","map","country","Circle","key","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","es_Map","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildCharData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","_ref$casesType","_useState","useState","_useState2","slicedToArray","setData","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","stop","apply","this","fetchData","es","datasets","backgroundColor","borderColor","App","setCountries","_useState3","_useState4","setInputCountry","_useState5","_useState6","setCountryInfo","_useState7","_useState8","tableData","setTableData","_useState9","lng","_useState10","mapCenter","setMapCenter","_useState11","_useState12","mapZoom","setMapZoom","_useState13","_useState14","mapCountries","setMapCountries","_useState15","_useState16","setCasesType","name","iso2","getCountriesData","onCountryChange","_callee2","event","countryCode","_context2","target","includes","_x","FormControl","Select","variant","onChange","MenuItem","src_InfoBox","e","todayCases","todayRecovered","todayDeaths","src_Map","src_Table","src_LineGraph","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4fb6120.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card,CardContent,Typography } from '@material-ui/core';\r\nimport \"./InfoBox.css\";\r\nfunction InfoBox({title, cases,active,isRed, total,...props}) {\r\n    return (\r\n        <Card \r\n        onClick = {props.onClick}\r\n        className = {`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}\r\n        >\r\n            <CardContent>\r\n                {/*Title*/}\r\n                <Typography className = \"infoBox_title\"color = \"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                {/*Number of Cases*/}\r\n                <h2 className = {`infoBox_cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n                    {cases}\r\n                </h2>\r\n                {/*Total */}\r\n                <Typography className = \"infoBox_total\"color = \"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport {Circle,Popup} from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex:\"#CC1034\",\r\n        rgb:\"rgb(204,16,52)\",\r\n        half_op:\"rgba(204,16,52,0.5)\",\r\n        multiplier: 800\r\n    },\r\n    recovered:{\r\n        hex:\"#7dd71d\",\r\n        rgb:\"rgb(125,215,29)\",\r\n        half_op:\"rgba(125,215,29,0.5)\",\r\n        multiplier: 1200\r\n    },\r\n    deaths:{\r\n        hex:\"#fb4443\",\r\n        rgb:\"rgb(251,68,67)\",\r\n        half_op:\"rgba(251,68,67,0.5)\",\r\n        multiplier: 2000    \r\n    },\r\n};\r\n\r\nexport const sortData = (data) =>{\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) =>{\r\n        if(a.cases > b.cases)\r\n            return -1;\r\n        else\r\n            return 1;\r\n    })\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0,0a\")}` : \"+0\";\r\n\r\n//Draw circles on the map with tooltip\r\nexport const showDataOnMap = (data,casesType = 'cases') =>(\r\n    data.map(country =>(\r\n        <Circle\r\n        key = {country.country}\r\n        center = {[country.countryInfo.lat,country.countryInfo.long]}\r\n        fillOpacity = {0.4}\r\n        color = {casesTypeColors[casesType].hex}\r\n        fillColor = {casesTypeColors[casesType].hex}\r\n        radius = {\r\n            Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\r\n        }\r\n        >\r\n        <Popup>\r\n            <div className = \"info_container\">\r\n                <div className = \"info_flag\"\r\n                style = {{backgroundImage: `url(${country.countryInfo.flag})`}}>\r\n                </div>\r\n                <div className = \"info_name\">{country.country}</div>\r\n                <div className = \"info_confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className = \"info_recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className = \"info_deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ))\r\n);","import React from 'react';\r\nimport './Map.css';\r\nimport {Map as LeaftletMap,TileLayer} from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className = \"map\">\r\n            <LeaftletMap center = {center} zoom = {zoom}>\r\n                <TileLayer\r\n                url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution = '&copy; <a href = \"http://osm.org/copyright\">OpenStreet</a> contributors'\r\n                />\r\n                {/* Loop through and draw circles */}\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeaftletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport \"./Table.css\";\r\nimport numeral from 'numeral';\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className = \"table\">\r\n            {countries.map((country) =>(\r\n                    <tr key = {country.country}>\r\n                        <td>{country.country}</td>\r\n                        <td>\r\n                            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n                        </td>\r\n                    </tr>\r\n            ))}\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React,{useState, useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nconst options = {\r\n    legend:{\r\n        display:false,\r\n    },\r\n    elements:{\r\n        point:{\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips:{\r\n        mode:\"index\",\r\n        intersect:false,\r\n        callbacks:{\r\n            label: function(tooltipItem,data)\r\n            {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            {\r\n                type:\"time\",\r\n                time:{\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat : \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines:{\r\n                    display:false,\r\n                },\r\n                ticks:{\r\n                    callback:function(value,index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildCharData = (data,casesType) =>{\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for(let date in data.cases) {\r\n        if(lastDataPoint)\r\n        {\r\n            let newDataPoint = {\r\n                x:date,\r\n                y:data['cases'][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType = \"cases\", ...props}) {\r\n\r\n    const [data,setData]  = useState({});\r\n\r\n    useEffect(() =>{\r\n        const fetchData = async() =>{\r\n        await  fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) =>{\r\n            const chartData = buildCharData(data,casesType);\r\n            setData(chartData)\r\n        });\r\n    };\r\n    fetchData();\r\n    },[casesType]);\r\n\r\n    return (\r\n        <div className = {props.className}>\r\n            {data.length > 0 && (\r\n                <Line \r\n                options = {options}\r\n                data={{\r\n                    datasets:[\r\n                        {\r\n                        backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                        borderColor: \"#cc1034\",\r\n                        data:data\r\n                    },\r\n                ],\r\n                }}\r\n                />\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React , {useState, useEffect} from 'react';\nimport './App.css';\nimport {MenuItem,FormControl,Select,Card,CardContent} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData,prettyPrintStat} from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  //https://disease.sh/v3/covid-19/countries\n\n\n  const [countries,setCountries] = useState([]);\n  const [country,setInputCountry] = useState(\"Worldwide\");\n  const [countryInfo,setCountryInfo] = useState({});\n  const [tableData,setTableData] = useState([]);\n  const [mapCenter,setMapCenter] = useState({lat:34.80746,lng:-40.4796});\n  const [mapZoom,setMapZoom] = useState(3);\n  const [mapCountries,setMapCountries] = useState([]);\n  const [casesType,setCasesType] = useState(\"cases\");\n\n  useEffect(() =>{\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then((response) => response.json())\n    .then((data) =>{\n      setCountryInfo(data);\n    });\n  },[]);\n\n  useEffect(()=>{\n    const getCountriesData = async() =>{\n     await fetch('https://disease.sh/v3/covid-19/countries')\n     .then((response) => response.json())\n     .then((data) =>{\n       const countries = data.map((country) =>(\n         {\n          name: country.country,\n          value: country.countryInfo.iso2\n         }\n       ));\n       const sortedData = sortData(data)\n       setTableData(sortedData);\n       setMapCountries(data);\n       setCountries(countries);\n     });\n    };\n    getCountriesData();\n  },[]);\n\n\n  const onCountryChange = async(event) =>{\n    const countryCode = event.target.value;\n\n    const url = countryCode === \"Worldwide\" ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then((data) =>{\n      setInputCountry(countryCode);\n      setCountryInfo(data);\n      //console.log(data.countryInfo.lat,data.countryInfo.long)\n      if(url.includes('https://disease.sh/v3/covid-19/all'))\n        setMapCenter([34.80746,-40.4796])\n      else\n        setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  //console.log('info',countryInfo);\n  //console.log(\"Countries\",countries);\n  return (\n    <div className=\"App\">\n      <div className = \"app_left\">\n      <div className = \"app_header\">\n      <h1>COVID-19 TRACKER</h1>\n      {/*Header*/}\n       {/*Title + Dropdown*/}\n      <FormControl  className = \"app_dropdown\"> \n        <Select\n          variant = \"outlined\"\n          onChange = {onCountryChange}\n          value = {country}>\n            <MenuItem value = \"Worldwide\">Wordlwide</MenuItem>\n            {\n              countries.map(country =>(\n                  <MenuItem value = {country.value}  key = {country}>{country.name} </MenuItem>\n              ))\n            }    \n        </Select>\n      </FormControl>\n      {/*InfoBox*3*/}\n      {/*Table*/}\n      {/*Graph*/}\n      {/*Map*/}\n      </div>\n      <div className = \"app_stats\">\n            <InfoBox\n            isRed\n            active = {casesType === \"cases\"}\n            onClick = {e => setCasesType(\"cases\")} \n            title = \"Coronavirus cases\" \n            cases = {prettyPrintStat(countryInfo.todayCases)} \n            total ={prettyPrintStat(countryInfo.cases)}\n            />\n            <InfoBox \n            active = {casesType === \"recovered\"}\n            onClick = {e => setCasesType(\"recovered\")} \n            title = \"Recovered\" \n            cases = {prettyPrintStat(countryInfo.todayRecovered)} \n            total ={prettyPrintStat(countryInfo.recovered)}\n            />\n            <InfoBox \n            isRed\n            active = {casesType === \"deaths\"}\n            onClick = {e => setCasesType(\"deaths\")} \n            title = \"Deaths\" \n            cases = {prettyPrintStat(countryInfo.todayDeaths)} \n            total ={prettyPrintStat(countryInfo.deaths)}\n            />\n      </div>\n      <Map \n      casesType = {casesType}\n      countries = {mapCountries}\n      center = {mapCenter}\n      zoom = {mapZoom}/>\n      </div>\n      <Card className = \"app_right\">\n          <CardContent>\n            <h3>Live cases by country</h3>\n            <Table countries=  {tableData} />\n            <h3 className = \"app_graph_title\">Worldwide new {casesType}</h3>\n            <LineGraph className = \"app_graph\"casesType = {casesType}/>\n          </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}